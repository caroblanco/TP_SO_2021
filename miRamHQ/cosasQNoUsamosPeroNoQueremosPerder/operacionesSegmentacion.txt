#include "operacionesSegmentacion.h"

//////////////////////////////////////SEGMENTACION///////////////////////////////////////////////////

void S_iniciarTripulante(int socket_cliente){
	int size;
	char * buffer;
	int desp = 0;

	t_tcb* tripulanteNuevo = malloc(sizeof(t_tcb));

	buffer = recibir_buffer(&size, socket);
		
	int idTripu = leer_entero(buffer, &desp);
	printf("lei el id de un tripu: %d", idTripu);

	int idPato = leer_entero(buffer, &desp);
	printf("lei el id de una patota: %d", idPato);
	//buscamos la patota
	int direccionPatota = buscarDirPatota(idPato);
		
	int posX = leer_entero(buffer, &desp);
	printf("lei la pos_x de un tripulante: %d", posX);
		
	int posY = leer_entero(buffer, &desp);
	printf("lei la pos en Y del tripu: %d", posY);

	tripulanteNuevo->idTripulante 	= idTripu;
	tripulanteNuevo->estado			= 'N';
	tripulanteNuevo->pos_x 			= posX;
	tripulanteNuevo->pos_y 			= posY;
	tripulanteNuevo->dir_PCB 		= direccionPatota;	// ES DIR LOGICA
	tripulanteNuevo->id_sig_inst 	= 0;
	
	//GUARDO LA TCB EN MEMORIA
	t_segmento* tcb_seg = guardarTcbSeg(tcb);

	//GUARDO LA TCB EN LA LISTA GLOBAL DE TCB
	t_tabla_tripulante* tablaTCB = crearTablaTripulante(tcb->idTripu, tcb_seg);
	list_add(tablaDeSegmentosDeTripulantes, tablaTCB);

	//AGREGO AL TRIPULANTE AL MAPA
	char charId = intToChar(idTripu);
	dibujar_tripulante(charId,  posX,  posY);

	free(buffer);
	free(tripulanteNuevo);
}


void S_iniciarPatota(int socket_cliente){
	int size;
	char * buffer;
	int desp = 0;

	buffer = recibir_buffer(&size, socket);
		
	char* tareas = leer_string(buffer, &desp);	//STRING DE TODAS LAS TAREAS \n
	printf("lei el string de las tareas");
		
	int idPatota = leer_entero(buffer, &desp);
	printf("lei el id de una patota: %d", id);

	int cantTripus = leer_entero(buffer, &desp);
	printf("lei la cantidad de tripus: %d", cantTripus);

	//HAYLUGAR -> UN TCB = 21 BYTES, VAN A HABER N TCBS + 1 PCB (OCUPA 8 BYTES) + TAREAS
	int hayLugar = puedoGuardar(21*cantTripus + (strlen(tareas)+1) + sizeof(t_pcb));

	if(hayLugar){
		//AGREGAR LAS TAREAS A LA MEMORIA -> T_SEGMENTO DE TAREAS
		//t_segmento* segmentoTareas = guardarTareasSeg(tareasSeparadas); //DEVUELVE EL SEGMENTO DONDE SE GUARDO
		t_segmento* segmentoTareas = guardarTareasSeg(tareas); //MANDO EL STRING DE LAS TAREAS NO LAS TAREAS SEPARADAS
		
		pcb = malloc(sizeof(t_pcb));

		pcb->idPatota = idPatota;
		pcb->tareas = segmentoTareas->base;	//DONDE INICIAN LAS TAREAS

		//GUARDO LA PCB EN MEMORIA -> T_SEGMENTO DE PATOTAS
		t_segmento* pcb_seg = guardarPcbSeg(pcb);//DEVUELVE EL SEGMENTO DONDE SE GUARDO
		printf("agregue la patota");
		
		// CREO LA TABLA DE LA PATOTA Y GUARDO EL SEGMENTO DE LAS TAREAS Y EL DEL PCB, GUARDO EN LA LISTA GLOBAL DE PATOTAS
		t_tabla_patota* tablaPCB = crearTablaPatota(idPatota, pcb_seg, segmentoTareas);
		list_add(tablaDeSegmentosDePatotas,tablaPCB);
		
		t_paquete* nuevoPaquete = crear_paquete_con_codigo_op(OK);

	}else{
		t_paquete* nuevoPaquete = crear_paquete_con_codigo_op(FAIL);
	}
	
	//ENVIAR PAQUETE
	enviar_paquete(nuevoPaquete, socket_cliente);
	//BORRAR PAQUETE
	eliminar_paquete(nuevoPaquete);
	//LIBERAR CONEXION
	liberar_conexion(socket_cliente);

	free(buffer);
	free(tarea);
	free(tareasSeparadas);
	free(pcb);
}

void S_expulsarTripulante(int socket_cliente){
	int size;
	char * buffer;
	int desp = 0;

	buffer = recibir_buffer(&size, socket);
	
	int idTripu = leer_entero(buffer, &desp);
	printf("lei el id de un tripulante: %d", idTripu);

	//int posicion = encontrarTripulante(idTripu);
		
	//LO SACO DEL MAPA
	char charId = intToChar(idTripu);
	expulsarDelMapa(charId);

	//LO SACAMOS DE LA MEMORIA -> CAMBIAMOS EL BITMAP
	eliminarTcbSeg(idTripu);

	//LO SACAMOS DE LA LISTA GLOBAL DE TCB
	sacarTripulanteListaGlobal(idTripu);

	printf("se elimino el tripulante de id: %d", idTripu);

	free(buffer);
}

void sacarTripulanteListaGlobal(int idTripulanteAEliminar){

	int sizeLista = string_arr_size(tablaDeSegmentosDeTripulantes);

	int mismo_id(t_tabla_tripulante* unaTable){
		return ((unaTable->idTripulante) == tid );
	}
	lock(mutexListaDeTripulantes);
	list_remove_and_destroy_by_condition(tablaDeSegmentosDeTripulantes, (void*) mismo_id, (void*) liberarTabla );
	unlock(mutexListaDeTripulantes);
}

void liberarTabla(t_tabla_tripulante* unaTabla){
	
	free(unaTabla->seg_tcb);
	free(unaTabla);	
}

void S_actualizarUbicacion(int socket_cliente){
	int size;
	char * buffer;
	int desp = 0;

	buffer = recibir_buffer(&size, socket);
	
	int id = leer_entero(buffer, &desp);
	printf("lei el id de un tripulante: %d", id);

	int nuevaPosX = leer_entero(buffer, &desp);
	printf("lei la nueva posicion en X del tripulante: %d", nuevaPosX);
	
	int nuevaPosY = leer_entero(buffer, &desp);
	printf("lei la nueva posicion en Y del tripulante: %d", nuevaPosY);

	t_tcb* nuevaTcb = malloc(sizeof(t_tcb));
	nuevaTcb = buscarTripulante(id);

	nuevaTcb->pos_x = nuevaPosX;
	nuevaTcb->pos_y = nuevaPosY;

	//PASAR EL ID A CHAR
	char charId = intToChar(id);
	moverTripulante(charId,nuevaPosX,nuevaPosY); 
	
	//ACTUALIZAR TRIPULANTE
	actualizarTripulante(idTripu, nuevaTcb);

	free(buffer);
}

void S_enviarOperacion(int socket_cliente){
    int size;
	char * buffer;
	int desp = 0;

	buffer = recibir_buffer(&size, socket_cliente);
	
	int idPatota = leer_entero(buffer, &desp);
	printf("lei el id de una patota: %d", idPatota);

    int idTripu = leer_entero(buffer, &desp);
	printf("lei el id de un tripulante: %d", idTripu);

	//BUSCO EL TRIPU CON EL ID
	t_tcb* tcb = buscarTripulante(idTripu);

	//BUSCO LA PATOTA
	t_pcb* pcb = buscarPatota(tcb->puntero_pcb);

	//BUSCAMOS LA TAREA USANDO LA LISTA DE TAREAS DE LA PCB Y LA PROX INSTRUCCION DE LA TCB
	char* tarea = buscarTarea(pcb->idPatota, tcb->proxInstruccion);

	//ACTUALIZO EL TRIPULANTE
	tcb->proxInstruccion ++;
	tcb-> estado = 'r';

	//CREO PAQUETE
	t_paquete* nuevoPaquete = armarPaquete(tarea);
	//ENVIAR PAQUETE
		enviar_paquete(nuevoPaquete, socket_cliente);
	//BORRAR PAQUETE
		eliminar_paquete(nuevoPaquete);
	//LIBERAR CONEXION
		liberar_conexion(socket_cliente);

	free(buffer);
	free(tcb);
	free(pcb);
	free(tarea);
}

t_paquete* armarPaquete(char* tarea){
	
	//SACAMOS LA INFO DE LA TAREA
	char** splitPorPuntoYcoma = string_split(tarea, ";"); 						// SEPARA CODIGO PARAMETROS ; POSX ; POSY ; TIEMPO
	char** splitPorEspacio = string_split(splitPorPuntoYcoma[0], " "); 			// SEPARA CODIGO PARAMETROS

	//VEO SI ES LA ULTIMA
	int esLaUltima = esLaUltimaTarea(pcb->idPatota, tcb->proxInstruccion);

	//PASAMOS LA INFO DE LA TAREA A INTS
	op_code codigoOperacion;
	if(			string_equals_ignore_case(splitPorEspacio[0], "GENERAR_OXIGENO")) { codigoOperacion= GENERAR_OXIGENO;	}
	else if(	string_equals_ignore_case(splitPorEspacio[0], "CONSUMIR_OXIGENO")){ codigoOperacion= CONSUMIR_OXIGENO;	}
	else if(	string_equals_ignore_case(splitPorEspacio[0], "GENERAR_COMIDA"))  { codigoOperacion= GENERAR_COMIDA;	}
	else if(	string_equals_ignore_case(splitPorEspacio[0], "CONSUMIR_COMIDA")) { codigoOperacion= CONSUMIR_COMIDA;	}
	else if(	string_equals_ignore_case(splitPorEspacio[0], "GENERAR_BASURA"))  { codigoOperacion= GENERAR_BASURA;	}
	else if(	string_equals_ignore_case(splitPorEspacio[0], "DESCARTAR_BASURA")){ codigoOperacion= DESCARTAR_BASURA;	}
	else if(	string_equals_ignore_case(splitPorEspacio[0], "MOVERSE"))         { codigoOperacion= MOVERSE;			}
	
	int posX 				= atoi(splitPorPuntoYcoma[1]);
	int posY 				= atoi(splitPorPuntoYcoma[2]);
	int parametros 			= atoi(splitPorEspacio[1]);
	int tiempo 				= atoi(splitPorPuntoYcoma[3]);

	//CREAMOS EL PAQUETE
	t_paquete* nuevoPaquete = crear_paquete_con_codigo_op(codigoOperacion);
	agregar_entero_a_paquete(nuevoPaquete, posX); 
	agregar_entero_a_paquete(nuevoPaquete, posY);
	agregar_entero_a_paquete(nuevoPaquete, parametros); 
	agregar_entero_a_paquete(nuevoPaquete, tiempo);
	agregar_entero_a_paquete(nuevoPaquete, esLaUltima);
	
	return nuevoPaquete;

	free(splitPorPuntoYcoma);
	free(splitPorEspacio);
}